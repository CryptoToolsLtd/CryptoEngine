import sys
sys.set_int_max_str_digits(2147483647) # 2^31 - 1

import unittest
import typing
from .is_prime_trivial import is_prime_trivial
from .is_prime_miller_rabin import is_prime_miller_rabin
from .is_prime_lucas import is_prime_lucas
from ..CHECK_TESTING import CHECK_TESTING

def is_prime(n: int) -> bool|typing.Literal["likely"]:
    res = is_prime_trivial(n, 15199)
    if res != "unknown":
        return res
    
    res = is_prime_miller_rabin(n, 2)
    if res != "likely":
        return res
    
    return is_prime_lucas(n)

class TestIsPrime(unittest.TestCase):
    def test_simple(self):
        self.assertEqual( is_prime(1), False )
        self.assertEqual( is_prime(221), False )
        self.assertEqual( is_prime(283988607550898), False )
        self.assertEqual( is_prime(80649529218697960541660606404), False )

        self.assertEqual( is_prime(2), True )
        self.assertEqual( is_prime(13), True )
        self.assertEqual( is_prime(15199), True )

        self.assertEqual( is_prime(283988607550897), "likely" )
        self.assertEqual( is_prime(398557155863752874372265559826507024089), "likely" )
    
    def test_hard(self):
        self.assertEqual( is_prime(133899814796759504088957153916739612559944132263794949), False )
        self.assertEqual( is_prime(94086806369269830109449975758707189081143167105506596927309595228152321334997646390998846041470698494706528346100561), False )
        self.assertEqual( is_prime(343297432904879866339161144355150973070059509567481001176061191962483502185829454661824227101650238259476214615343257158801279249835524897541830644057216467876742285007045006311950780413199348787434831657770117208970524026727468710637497448491180279593592621106520452439299673213290971396558259345476917784992), False )

        # Large prime numbers are generated using SageMath's random_prime() function.

        self.assertEqual( is_prime(640574363347658008976065577313410602633), "likely" )
        self.assertEqual( is_prime(471497134872784340179339938327039220117), "likely" )
        self.assertEqual( is_prime(199549052179618428538420404150013076781276993139784470204594279128682885725133), "likely" )
        self.assertEqual( is_prime(4017968464957689850590110414759272228321440919839638967169886012314629404351339560576315880996645873690990889441493247985061565819399515187076114633949), "likely" )
        self.assertEqual( is_prime(343297432904879866339161144355150973070059509567481001176061191962483502185829454661824227101650238259476214615343257158801279249835524897541830644057216467876742285007045006311950780413199348787434831657770117208970524026727468710637497448491180279593592621106520452439299673213290971396558259345476917784991), "likely" )
        self.assertEqual( is_prime(41838562179304313180287602753435208833626736481873400412818460664413794794661457651796205878870553915780222204080679060252638687274555677320604793971393230367398195532776875735909753467670095554136694576100748509467858899069719978618821824498869020922875446747476235622947779129016976335104125119369671835029406881353652684059057596718034730841106309454096848254657942654678576181064181330548929446533449568773897047246620259022878051214494827722881352075259153878839236848504753278290708390108857942251588900168449021800811499015254210946309370755684662579038568220043062171393302105833953904841311700124921745058747), "likely" )

if __name__ == '__main__':
    CHECK_TESTING()

    if len(sys.argv) >= 2:
        n = int(sys.argv[1])
        print("is prime" if is_prime(n) else "is composite")
